import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

// components
import Header from "@/components/Header";
import PageTransition from "@/components/PageTransition";

const geistSans = Geist({
  subsets: ["latin"],
  weight: ["100", "200", "300", "400", "500", "600", "700"],
  variable: "--font-geist-sans",
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Elnur Portfolio",
  description: "Generated by create next app",
};

/* In TypeScript, Readonly is a utility type that ensures the properties of an object cannot be reassigned after the object is created. 
When applied to a type like { children: React.ReactNode }, it ensures that the children prop passed to the 
RootLayout component is immutable â€” i.e., its value cannot be changed within the component.
In this case, you can use Readonly to ensure that you don't accidentally modify the children prop within your component.

React.ReactNode is a TypeScript type that represents anything that can be rendered in React. It can include elements like:

JSX elements
Strings
Numbers
Arrays of JSX elements
null, undefined, false (which means nothing is rendered)

Using React.ReactNode ensures that the children prop can accept any valid React child element.

*/
export default function RootLayout({ children }: Readonly<{ children: React.ReactNode; }>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        <Header />
        <PageTransition>{children}</PageTransition>

      </body>
    </html>
  );
}
